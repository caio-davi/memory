{"version":3,"sources":["compopnents/Board.jsx","compopnents/Header.jsx","compopnents/Modal.jsx","Utils.js","compopnents/App.jsx","index.js"],"names":["Board","props","className","cardList","i","push","board","length","color","key","onClick","flipCard","boardControl","boardView","icon","cardDict","size","Header","dark","expand","center","tag","turn","points","nav","caret","handleNewGameModal","Modal","isOpen","isFinished","newGameModal","toggle","newGame","newGameBoardSize","toggleNewGameModal","modalMessage","clone","obj","copy","Date","setTime","getTime","Array","len","Object","attr","hasOwnProperty","Error","App","initialState","state","a","j","x","Math","floor","random","shuffle","initialBoardControl","fill","chooseOne","chooseTwo","0","1","React","useState","setBoardControl","setBoard","setNewGameModal","setNewGameBoardSize","value","updateBoardControl","index","choose","newBoardControl","cleanChooses","unflipCards","player","setTimeout","isTrue","arg","every","boardSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53a9eb82.chunk.js","sourcesContent":["import React from 'react';\nimport {MDBContainer, MDBCard, MDBIcon} from 'mdbreact';\nimport '../styles/Board.css';\n\nconst Board = (props) => {\n\n    const CardList = (props) => {\n        let cardList = [];\n        for(let i in props.board ){\n            cardList.push(\n                <MDBCard className={props.board.length === 24 ? 'MDBCard_small' :'MDBCard'} color='pink' key={'card_'+i} onClick = {()=>props.flipCard(i)}>\n                    {props.boardControl.boardView[i] ?\n                        <MDBIcon icon = {props.cardDict[props.board[i]]}  size=\"5x\" />\n                        :\n                        i\n                    }\n                </MDBCard>\n            );\n        }\n        return cardList;\n    };\n\n    return (\n        <MDBContainer className='MDBContainer'>\n            <CardList  {...props}/>\n        </MDBContainer>    \n    );\n}\n\nexport default Board;","import React from 'react';\nimport {\n    MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem,\n    MDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem\n    } from \"mdbreact\";\nimport '../styles/Header.css';\n\nconst Header = (props) => {\n\n    return (\n        <MDBNavbar color=\"indigo\" dark expand=\"md\" >\n        <MDBNavbarBrand>\n          <strong className=\"white-text h1\">Memory Card Game </strong>\n        </MDBNavbarBrand>\n          <MDBNavbarNav center >\n              <MDBNavItem tag='h2' className={props.boardControl.turn  ? 'Inactive' : 'Active'}>\n                Player 1 \n              </MDBNavItem>\n              <MDBNavItem tag='h1'>\n              {props.boardControl.points[0]} x {props.boardControl.points[1]}\n              </MDBNavItem>\n              <MDBNavItem tag='h2' className={props.boardControl.turn  ? 'Active' : 'Inactive'}>\n                Player 2 \n              </MDBNavItem>\n              <MDBDropdown>\n                <MDBDropdownToggle nav caret>\n                  <span className=\"h2\">New Game</span>\n                </MDBDropdownToggle>\n                <MDBDropdownMenu>\n                  <MDBDropdownItem onClick={()=>{props.handleNewGameModal(12)}}>3x4</MDBDropdownItem>\n                  <MDBDropdownItem onClick={()=>{props.handleNewGameModal(16)}}>4x4</MDBDropdownItem>\n                  <MDBDropdownItem onClick={()=>{props.handleNewGameModal(24)}}>4x6</MDBDropdownItem>\n                </MDBDropdownMenu>\n              </MDBDropdown>\n          </MDBNavbarNav>\n      </MDBNavbar>\n    )\n};\n\n\nexport default Header;","import React from 'react';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\n\n\nconst Modal = (props) => {\n    \n    const toggleHandler = () => {\n        return props.isFinished() ? props.newGame(props.newGameBoardSize) : props.toggleNewGameModal();\n    };\n\n    return(\n        <MDBContainer>\n            <MDBModal isOpen={props.isFinished() || props.newGameModal} >\n                <MDBModalHeader toggle={() => toggleHandler()}>\n                    MDBModal \n                </MDBModalHeader>\n                <MDBModalBody>\n                    {props.modalMessage()}\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBBtn color=\"primary\" onClick = {() => props.newGame(props.newGameBoardSize)}>\n                        Ok\n                    </MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBContainer>\n    );\n};\n\nexport default Modal;","export function clone(obj) {\n    let copy;\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (let i = 0, len = obj.length; i < len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (let attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n\n\nexport function shuffle(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}","import React from 'react';\nimport '../styles/App.css';\nimport Board from './Board';\nimport Header from './Header';\nimport Modal from './Modal';\nimport {clone, shuffle} from '../Utils';\n\nconst App = () => {\n\n  const cardDict = ['cat', 'crow', 'dog', 'dove', 'dragon', 'fish', 'frog', 'hippo', 'horse', 'kiwi-bird', 'otter', 'spider']\n\n  const initialState = (size) => {\n    let state = [];\n    for(let i = 0; i < size/2; i++){\n      state.push(i);\n      state.push(i);\n    }\n    return shuffle(state);\n  } \n\n  const initialBoardControl = (size) => {\n    let boardView = new Array(size);\n    boardView.fill(false);\n    return {\n      boardView : boardView,\n      chooseOne : false,\n      chooseTwo : false,\n      points : {\n        0 : 0,\n        1 : 0,\n      },\n      turn : false,                       // player 1 false, player 2 true\n    }\n  };\n\n  const [boardControl, setBoardControl] = React.useState(initialBoardControl(12));\n  const [board, setBoard] = React.useState(initialState(12));\n  const [newGameModal, setNewGameModal] = React.useState(false);\n  const [newGameBoardSize, setNewGameBoardSize] = React.useState(12);\n\n  const newGame = (boardSize) => {\n    setBoard(initialState(boardSize));\n    setBoardControl(initialBoardControl(boardSize));\n    setNewGameModal(false);\n  };\n  \n  const toggleNewGameModal = () => {\n    setNewGameModal(!newGameModal);\n  };\n\n  const handleNewGameModal = (value) => {\n    setNewGameModal(!newGameModal);\n    setNewGameBoardSize(value);\n  };\n\n  const updateBoardControl = (index, value, choose) => {\n    let newBoardControl = clone(boardControl);\n    newBoardControl[choose] = index;\n    newBoardControl.boardView[index] = value;\n    setBoardControl(newBoardControl);\n  };\n\n  const cleanChooses = (unflipCards) => {\n    let newBoardControl = clone(boardControl);\n    if(unflipCards){\n      newBoardControl.boardView[newBoardControl.chooseOne] = false;\n      newBoardControl.boardView[newBoardControl.chooseTwo] = false;\n    }else{\n      const player = boardControl.turn ? 1 : 0;\n      newBoardControl.points[player] = boardControl.points[player] + 1 ;\n    }\n    newBoardControl.chooseOne = false;\n    newBoardControl.chooseTwo = false;\n    newBoardControl.turn = !boardControl.turn;                       \n    setBoardControl(newBoardControl);\n  };\n\n  const finishTurn = () => {\n    if(board[boardControl.chooseOne] === board[boardControl.chooseTwo]){\n      cleanChooses(false);\n    }else{\n      cleanChooses(true);\n    }\n  };\n\n  const flipCard = (index) => {\n    if(boardControl['chooseOne'] === false){\n      updateBoardControl(index, true, 'chooseOne');\n    }\n    else if(boardControl['chooseTwo'] === false){\n      updateBoardControl(index, true, 'chooseTwo');\n    }\n  };\n\n  if(boardControl.chooseOne !== false && boardControl.chooseTwo !== false){\n    setTimeout(finishTurn, 1500);\n  }\n\n  const isTrue = (arg) => { \n    return arg === true;\n  };\n\n  const isFinished  = ()  => {\n    return boardControl.boardView.every(isTrue);\n  };\n\n  const winner = () => {\n    return boardControl.points[0] > boardControl.points[1] ? 1 : 0;\n  };\n\n  const modalMessage = () => {\n    if(!newGameModal && boardControl.points[0] === boardControl.points[1]){\n      return \"Draw game!\";\n    }\n    return isFinished() ? \"Player \"+ winner() +\" win!\" : \"Are you sure?\";\n  };\n\n  return (\n    <div className=\"App\">\n      <Modal\n        isFinished={isFinished}\n        newGame={newGame}\n        handleNewGameModal = {handleNewGameModal}\n        newGameModal = {newGameModal}\n        newGameBoardSize = {newGameBoardSize}\n        toggleNewGameModal = {toggleNewGameModal}\n        modalMessage = {modalMessage}\n      />\n\n      <Header \n        boardControl={boardControl}\n        handleNewGameModal = {handleNewGameModal}\n      />\n\n      <Board \n        board = {board} \n        boardControl = {boardControl}\n        cardDict = {cardDict}\n        flipCard = {flipCard}\n      />\n    </div>\n    \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './compopnents/App';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}